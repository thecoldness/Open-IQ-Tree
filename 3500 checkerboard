#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cctype>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
inline void write(int x)
{
	if(x < 0)
	{
		putchar('-');
		x = -x;
	}
	if(x > 9)	write(x / 10);
	putchar('0' + x % 10);
}
const int Max_n = 2e3 + 5;
int n , k , edge[Max_n][Max_n] , last[2][Max_n * 2] , pre[2][Max_n * 2] , tot[2][Max_n * 2] , ans[Max_n][Max_n];//0 行 1列 
int ret;
char c[Max_n];
inline void add(int li , int lj , int ri , int rj)
{
	li = max(li , 1) , lj = max(1 , lj);
	++ ans[li][lj] , ++ ans[ri + 1][rj + 1];
	-- ans[ri + 1][lj] , -- ans[li][rj + 1];
}
int main()
{
	n = read() , k = read();
	for(int i = 1 ; i <= n ; ++ i)
	{
		scanf("%s" , c + 1);
		for(int j = 1 ; j <= n ; ++ j)
			edge[i][j] = (c[j] == 'B');
	}
	memset(pre , 1 , sizeof(pre));
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= n ; ++ j)
			if(edge[i][j])	
			{
				pre[0][i] = min(pre[0][i] , j) , last[0][i] = max(last[0][i] , j) , ++ tot[0][i];
				pre[1][j] = min(pre[1][j] , i) , last[1][j] = max(last[1][j] , i) , ++ tot[1][j];
			}
	for(int i = 1 ; i <= n ; ++ i)
	{
		if(!tot[0][i])	continue;
		if(last[0][i] - pre[0][i] + 1 > k)	continue;
		add(i - k + 1 , last[0][i] - k + 1 , i , pre[0][i]);
	}
	for(int i = 1 ; i <= n ; ++ i)
	{
		if(!tot[1][i])	continue;
		if(last[1][i] - pre[1][i] + 1 > k)	continue;
		add(last[1][i] - k + 1 , i - k + 1 , pre[1][i] , i);
	}
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= n ; ++ j)
		{
			ans[i][j] += ans[i - 1][j] + ans[i][j - 1] - ans[i - 1][j - 1];
			ret = max(ret , ans[i][j]);
		}
	for(int i = 1 ; i <= n ; ++ i)
	{
		if(!tot[0][i]) ++ ret;
		if(!tot[1][i]) ++ ret;
	}
	write(ret);
	return 0;
}
