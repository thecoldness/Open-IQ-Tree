#include<cstdio>
#include<vector>
#include<algorithm>
#include<cctype>
using namespace std;
#define int long long
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 2e5 + 5;
const int Max_m = 2e5 + 5;
struct node{
	int pos , id,  flag;
	node(int a , int b , int c)
	{
		pos = a , id = b , flag = c;
	}
	node(){}
};
vector<node> ask[Max_m];
struct Node{
	int flag , x , y , val;
	Node(int a , int b , int c , int d)
	{
		flag = a , x = b , y = c , val = d;
	}
	Node(){}
}opt[Max_m];
vector<int> v[Max_n];
int fa[Max_n] , a[Max_n] , type , l , r , tmp[Max_n] , tot , ans[Max_m] , note[Max_n] , n , m;
struct NOde{
	int l , r , tag;
}tree[Max_n << 2];
inline void push_down(int tr)
{
	if(tree[tr].tag == -1)	return;
	tree[tr * 2].tag = tree[tr * 2 + 1].tag = tree[tr].tag;
	tree[tr].tag = -1;
}
void build(int ll , int rr , int tr)
{
	tree[tr].l = ll , tree[tr].r = rr , tree[tr].tag = -1;
	if(ll == rr)	return;
	int mid = (ll + rr) >> 1;
	build(ll , mid , tr * 2);
	build(mid + 1 , rr , tr * 2 + 1);
}
void change(int ql , int qr , int va , int tr)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > qr || rr < ql)	return;
	if(ql <= ll && rr <= qr)
	{
		tree[tr].tag = va;
		return;
	}
	push_down(tr);
	change(ql , qr , va , tr * 2);
	change(ql , qr , va , tr * 2 + 1);
}
void query(int ql , int qr , int tr)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > qr || rr < ql)	return;
	if(ql <= ll && rr <= qr && tree[tr].tag != -1)
	{
		for(int i = ll ; i <= rr ; ++ i)
			tmp[i] = tree[tr].tag;
		return;
	}
	push_down(tr);
	query(ql , qr , tr * 2);
	query(ql , qr , tr * 2 + 1);
}
int find(int x)
{
	return fa[x] == x ? x : fa[x] = find(fa[x]);
}
inline void merge(int x , int y)
{
	if(x == y)	return; 
	if(v[x].size() < v[y].size())	swap(x , y);
	int sz = v[y].size();
	for(int i = 0 ; i < sz ; ++ i)
	{
		int now = v[y][i];
		a[now] += note[y] - note[x];
		v[x].push_back(now);
	}
	fa[find(y)] = find(x);
}
inline int get(int x)
{
	return a[x] + note[find(x)];
}
signed main()
{
	n = read() , m = read();
	for(int i = 1 ; i <= n ; ++ i)
		fa[i] = i , v[i].push_back(i);
	build(1 , n , 1);
	for(int i = 1 ; i <= m ; ++ i)
	{
		type = read() , l = read() , r = read();
		if(type == 1)
			opt[i] = Node(1 , l , r , 0);
		else if(type == 2)
			opt[i] = Node(2 , l , 0 , r);
		else if(type == 3)
			change(l , r , i , 1);
		else if(type == 4)
		{
			++ tot;
			query(l , r , 1);
			for(int j = l ; j <= r ; ++ j)
			{
				ask[tmp[j]].push_back(node(j , tot , 0));
				ask[i].push_back(node(j , tot , 1));
			}
		}
	}
	for(int i = 0 ; i <= m ; ++ i)
	{
		if(opt[i].flag)
		{
			if(opt[i].flag == 1)	merge(find(opt[i].x) , find(opt[i].y));
			if(opt[i].flag == 2)	note[find(opt[i].x)] += opt[i].val;
		}
		int sz = ask[i].size();
		for(int j = 0 ; j < sz ; ++ j)
			if(ask[i][j].flag)	ans[ask[i][j].id] += get(ask[i][j].pos);
			else ans[ask[i][j].id] -= get(ask[i][j].pos);
	}
	for(int i = 1 ; i <= tot ; ++ i)
		printf("%lld\n" , ans[i]);
	return 0;
}
