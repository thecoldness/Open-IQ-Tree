#include<cstdio>
#include<cctype>
#include<cstring>
#include<iostream>
#include<algorithm>
#define int unsigned int
using namespace std;
inline int read()
{
	int res =0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 5e4 + 5;
struct node{
	int l , r , f[6][6];
	char tag;
}tree[Max_n << 2];
int n , m , x , y , ans[6][6];
char c[Max_n] , type , z;
inline void push_up(int tr)
{
	for(int i = 1 ; i <= 5 ; ++ i)
		for(int j = i ; j <= 5 ; ++ j)
		{
			tree[tr].f[i][j] = tree[tr * 2].f[i][j] + tree[tr * 2 + 1].f[i][j];
			for(int k = i ; k < j ; ++ k)
				tree[tr].f[i][j] +=tree[tr * 2].f[i][k] * tree[tr * 2 + 1].f[k + 1][j];
		}	
}
inline void push_down(int tr)
{
	if(tree[tr].tag == 0)	return;
	memset(tree[tr * 2].f , 0 , sizeof(tree[tr * 2].f));
	memset(tree[tr * 2 + 1].f , 0 , sizeof(tree[tr * 2 + 1].f));
	if(tree[tr].tag == '(')
	{
		tree[tr * 2].f[1][1] = tree[tr * 2].r - tree[tr * 2].l + 1;
		tree[tr * 2 + 1].f[1][1] = tree[tr * 2 + 1].r - tree[tr * 2 + 1].l + 1;
	}
	else if(tree[tr].tag == '0')
	{
		tree[tr * 2].f[2][2] = tree[tr * 2].f[4][4] = tree[tr * 2].r - tree[tr * 2].l + 1;
		tree[tr * 2 + 1].f[2][2] = tree[tr * 2 + 1].f[4][4] = tree[tr * 2 + 1].r - tree[tr * 2 + 1].l + 1;
	}
	else if(tree[tr].tag == 'w')
	{
		tree[tr * 2].f[3][3] = tree[tr * 2].r - tree[tr * 2].l + 1;
		tree[tr * 2 + 1].f[3][3] = tree[tr * 2 + 1].r - tree[tr * 2 + 1].l + 1;
	}
	else if(tree[tr].tag == ')')
	{
		tree[tr * 2].f[5][5] = tree[tr * 2].r - tree[tr * 2].l + 1;
		tree[tr * 2 + 1].f[5][5] = tree[tr * 2 + 1].r - tree[tr * 2 + 1].l + 1;
	}
	tree[tr * 2].tag = tree[tr * 2 + 1].tag = tree[tr].tag;
	tree[tr].tag = 0;
}
void build(int tr , int ll , int rr)
{
	tree[tr].l = ll , tree[tr].r = rr , tree[tr].tag = 0;
	if(ll == rr)
	{
		if(c[ll] == '(')	tree[tr].f[1][1] = 1;
		if(c[ll] == '0')	tree[tr].f[2][2] = tree[tr].f[4][4] = 1;
		if(c[ll] == 'w')	tree[tr].f[3][3] = 1;
		if(c[ll] == ')')	tree[tr].f[5][5] = 1;
		return;
	}
	int mid = (ll + rr) >> 1;
	build(tr * 2 , ll , mid);
	build(tr * 2 + 1 , mid + 1 , rr);
	push_up(tr);
}
void change(int l , int r , int tr , char d)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > r || rr < l)	return;
	if(l <= ll && rr <= r)
	{
		memset(tree[tr].f , 0 , sizeof(tree[tr].f));
		if(d == '(')	tree[tr].f[1][1] = tree[tr].r - tree[tr].l + 1;
		else if(d == '0')	tree[tr].f[2][2] = tree[tr].f[4][4] = tree[tr].r - tree[tr].l + 1;
		else if(d == 'w')	tree[tr].f[3][3] = tree[tr].r - tree[tr].l + 1;
		else if(d == ')')	tree[tr].f[5][5] = tree[tr].r - tree[tr].l + 1;
		tree[tr].tag = d;
		return;
	}
	push_down(tr);
	change(l , r , tr * 2 , d);
	change(l , r , tr * 2 + 1 , d);
	push_up(tr);
}
inline void query(int l , int r , int tr)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > r || rr < l)	return;
	if(l <= ll && rr <= r)
	{
		int tmp[6][6];
		memset(tmp , 0 , sizeof(tmp));
		for(int i = 1 ; i <= 5 ; ++ i)
			for(int j = i ; j <= 5 ; ++ j)
			{
				tmp[i][j] = ans[i][j] + tree[tr].f[i][j];
				for(int k = i ; k < j ; ++ k)
					tmp[i][j] += ans[i][k] * tree[tr].f[k + 1][j];
			}
		memcpy(ans , tmp , sizeof(ans));
		return;
	}
	push_down(tr);
	query(l , r , tr * 2);
	query(l , r , tr * 2 + 1);
}
signed main()
{
	n = read() , m = read();
	scanf("%s" , c + 1);
	build(1 , 1 , n);
	while(m --)
	{
		cin >> type;
		if(type == 'A')
		{
			x = read();
			cin >> z;
			change(x , x , 1 , z);
		}
		else if(type == 'B')
		{
			x = read() , y = read();
			cin >> z;
			change(x , y , 1 , z);
		}
		else if(type == 'C')
		{
			x = read() , y = read();
			memset(ans , 0 , sizeof(ans));
			query(x , y , 1);
			printf("%u\n" , ans[1][5]);
		}
	}
	return 0;
}
