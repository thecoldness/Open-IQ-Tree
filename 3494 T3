#include<cstdio>
#include<utility>
#include<cctype>
#include<unordered_map>
#include<algorithm>
using namespace std;
#define int long long
const int MOD = 1e9 + 7;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
inline void write(int x)
{
	if(x < 0)
	{
		putchar('-');
		x = -x;
	}
	if(x > 9)	write(x / 10);
	putchar('0' + x % 10);
}
inline int quickpow(int x , int y)
{
	int ret = 1;
	x %= MOD;
	while(y)
	{
		if(y & 1)	ret *= x , ret %= MOD;
		y >>= 1;
		x *= x , x %= MOD;
	}
	return ret;
}
int T , now , b[100] , inv[100] , c[70][70];
inline int ni(int x)
{
	return inv[x];
}
inline int C(int n , int m)
{
	return c[n][m];
}
inline size_t getseed(int seed , int value)
{
	return seed ^= value + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}
namespace std
{
	template<>
	struct hash<pair<int,int>>
	{
		size_t operator()(const pair<int,int> p)const
		{
			int sed = getseed(0 , p.first);
			return getseed(sed , p.second);
		}
	};
}
unordered_map<pair<int , int> , int> s;
int solve(int n , int k)
{
	int ret = 0 , reu;
	if(!n || n == 1)
	{
		if(n == 0)	ret = k ? 0 : 1;
		else ret = k ? 1 : 2;
		s[make_pair(n , k)] = ret;
		return ret;
	}
	if(s.find(make_pair(n , k)) != s.end())	return s[make_pair(n , k)];
	for(int i = 0 ; i <= k ; ++ i)
	{
		reu = C(k + 1 , i) , ret %= MOD;
		reu *= b[i] , reu %= MOD;
		reu *= quickpow(n + 1 , k + 1 - i) , reu %= MOD;
		ret += reu;
	}
	if(s.find(make_pair(n / 2 , 0)) == s.end())	solve(n / 2 , 0);
	ret *= s[make_pair(n / 2 , 0)] , ret %= MOD;
	for(int i = 1 ; i <= k + 1 ; ++ i)
	{
		reu = C(k + 1 , i);
		reu *= b[k + 1 - i] , reu %= MOD;
		reu *= (1ull << i) % MOD , reu %= MOD;
		if(s.find(make_pair(n / 2 , i)) == s.end())	solve(n / 2 , i);
		reu *= s[make_pair(n / 2 , i)] , reu %= MOD;
		ret -= reu , ret %= MOD;
	}
	ret *= ni(k + 1) , ret %= MOD;
	ret = (ret + MOD) % MOD;
	return	s[make_pair(n , k)] = ret;
}
signed main()
{
	b[0] = 1;
	for(int i = 1 ; i <= 65 ; ++ i)
		inv[i] = quickpow(i , MOD - 2);
	for(int i = 0 ; i <= 65 ; ++ i)
		c[i][0] = 1;
	for(int i = 1 ; i <= 65 ; ++ i)
		for(int j = 1 ; j <= 65 ; ++ j)
			c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % MOD;
	for(int i = 1 ; i <= 60 ; ++ i)
	{
		for(int j = 0 ; j < i ; ++ j)
			b[i] -= C(i + 1 , j) * b[j] % MOD , b[i] %= MOD;
		b[i] *= ni(i + 1) , b[i] %= MOD;
		b[i] = (b[i] + MOD) % MOD;
	}
	T = read();
	while(T --)
	{
		now = read();
		if(s.find(make_pair(now / 2 , 0)) == s.end())	
			solve(now / 2 , 0);
		write(s[make_pair(now / 2 , 0)]);
		putchar('\n');
	}
	return 0;
}
