#include<cstdio>
#include<algorithm>
#include<cctype>
#include<cstring>
#include<map>
#include<ctime>
#include<random>
#include<climits>
#define int long long
using namespace std;
inline int read()
{
	int res = 0; 
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 2e6 + 5;
char c[Max_n];
int pre[Max_n] , n , k , m , ans[Max_n] , tmpk[Max_n], dif[Max_n] , sh[Max_n] , l , r , ret , bef[Max_n] , rnd = 1;
int nex[Max_n];
bool fin[Max_n];
signed main()
{
	srand(time(0));
	n = read() , k = read() , m = read();
	scanf("%s" , c + 1);
	c[0] = '0' , c[n + 1] = '0';
	for(int i = 1 ; i <= n + 1; ++ i)
		dif[i] = (c[i - 1] == '1') ^ (c[i] == '1');
	for(int i = 0 ; i < k ; ++ i)
		sh[i] = rand() * rand() + rand();
	for(int i = 1 ; i <= n + 1 ; ++ i)
		if(dif[i])	pre[i] = pre[i - 1] ^ sh[i % k];
		else pre[i] = pre[i - 1];
	for(int i = 1 ; i <= n + 1 ; ++ i)
	{
		ans[i] = ans[i - 1];
		bef[i] = tmpk[i % k];
		if(dif[i])
		{
			ans[i] -= tmpk[i % k];
			tmpk[i % k] = i - tmpk[i % k];
			ans[i] += tmpk[i % k];
		}
		nex[i] = tmpk[i % k]; 
	}
	while(m --)
	{
		l = read() , r = read();
		if(pre[r] ^ pre[l] ^ ((c[l] != '0') * sh[l % k]) ^ ((c[r] != '0') * sh[(r + 1) % k]))
		{
			printf("-1\n");
			continue;
		}
		ret = ans[r] - ans[l];//暂不考虑r + 1 , l - 1 
		if(c[r] == '1')
			ret += r + 1 - 2 * bef[r + 1];
		if(c[l] == '1')
			ret += 2 * nex[l] - l;
		printf("%lld\n" , ret / k);
	}
	return 0;
}
