#include<cctype>
#include<queue>
#include<cstring>
#include<cstdio>
#include<algorithm>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		if(c == '-')	flag = false;
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
inline void write(int x)
{
	if(x < 0)	
	{
		putchar('-');
		x = -x;
	}
	if(x > 9)	write(x / 10);
	putchar('0' + x % 10);
}
inline void writeln(int x)
{
	write(x);
	putchar('\n');
}
const int Max_n = 5e5 + 5;
int mintime[Max_n] , v[Max_n] , fa[Max_n] , ans[Max_n] , ban[Max_n] , n , k , head[Max_n] , tot , handle , dep[Max_n];
struct node{
	int nex , to , val;
	node(int a , int b , int c)
	{
		nex = a , to = b , val = c;
	}
	node(){}
}edge[Max_n];
inline void add_edge(int x , int y , int z)
{
	edge[ ++ tot] = node(head[x] , y , z);
	head[x] = tot;
}
queue<int> q , tmp;
void bfs()
{
	q.push(1);
	while(q.size())
	{
		int now = q.front();
		q.pop();
		if(dep[now] > handle)
		{
			while(tmp.size() && dep[tmp.front()] == handle)
			{
				if(!ban[tmp.front()])	ans[tmp.front()] = min(ans[tmp.front()] , mintime[handle]);
				tmp.pop();
			}
			mintime[handle + 1] = mintime[handle] + k;
			++ handle;
		}
		ans[now] = ans[fa[now]] + v[now];
		if(!ban[now])	ans[now] = min(ans[now] , mintime[handle]);
		mintime[handle] = min(ans[now] , mintime[handle]);
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			dep[edge[i].to] = dep[now] + 1;
			tmp.push(edge[i].to);
			q.push(edge[i].to);
		}
	}
}
int main()
{
	n = read() , k = read();
	for(int i = 2 ; i <= n ; ++ i)
	{
		fa[i] = read() , v[i] = read() , ban[i] = read();
		if(!ban[i])	v[i] = min(v[i] , k);
		add_edge(fa[i] , i , v[i]);
	}
	memset(mintime , 0x3f3f3f3f , sizeof(mintime));
	mintime[1] = 0;
	handle = 1;
	dep[1] = 1;
	bfs();
	for(int i = 1 ; i <= n ; ++ i)
		if(!ban[i])	ans[i] = min(ans[i] , mintime[dep[i]]);
	for(int i = 1 ; i <= n ; ++ i)
		writeln(ans[i]);
	return 0;
}
